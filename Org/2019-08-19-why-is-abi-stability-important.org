#+STARTUP: showall indentX
#+STARTUP: hidestars
#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:nil ^:nil |:nil
#+BEGIN_EXPORT html
---
layout: default
title: Why is ABI Stability important?
---
#+END_EXPORT

* Why is ABI stability important?

Most open-source software projects follow distinct life cycle patterns as they
evolve from the genesis of a idea, all the way through to a mature stable
well-defined project. You can see this evolution reflected in all aspects of the
project. Upstreaming rules for instance, are usually quiet permissive in the
early days and then become gradually more conservative and risk adverse over
time. Similarly, you expect lots of bugs in the early days, then things becomes
more tested and stable over time, and so on.

This life-cycle is also evident in a project's management of it's application
binary interface, usually shortened to ABI. Before continuing, I should point
out two things.

 - If you are bit fuzzy on what I mean by ABI, also know as "binary
   compatibility", you should read through the [[https://en.wikipedia.org/wiki/Application_binary_interface][wikipedia entry]] on it. 
 - I have made quiet a bit of use of dataset's and tools from [[https://abi-laboratory.pro][ABI Laboratory
   project]], it's worth following the links to that project below to review the
   datasets. I have annotated those links with a (†).

In the early days of a project, ABI changes are rarely given any consideration,
you are usually /way/ too busy trying to change the world! Then as time goes on
and the project becomes popular. As more people join the project, and become
dependent on it, the more time you spend making sure that you don't break their
software.

At the extreme end of this cycle are very mature project's like the Linux
Kernel. Linus Torvalds explains Linux's commitment to maintaining a stable ABI
in his [[https://yarchive.net/comp/linux/gcc_vs_kernel_stability.html][own words]].

#+BEGIN_QUOTE
We care about user-space interfaces to an insane degree. We go to extreme
lengths to maintain even badly designed or unintentional interfaces. Breaking
user programs simply isn't acceptable. -- Linus Torvalds, 2005
#+END_QUOTE

There are a few distinct patterns of ABI management, between fledgling projects
and very mature project's like Linux.

** Patterns of ABI management

In some software libraries, an evolutionary pattern is very clear, that is they
follow the common pattern of an unstable ABI in their early day's and then
after some period of settling they declare a *1.0 release* and their ABI is more
or less set in stone from that point on-wards. The [[https://abi-laboratory.pro/index.php?view=timeline&l=gstreamer][GStreamer (†)]] project is good
example of this form evolution.

#+PLOT: set:"xtics rotate" timefmt "%d/%m/%Y"
#+PLOT: title:"GStreamer Backward Compatibility"
#+PLOT: set:"yrange [0:110]" set:"ylabel '% Compatibility'" set:"key off"
#+PLOT: ind:2 deps:(3) type:2d with:linespoints with:labels 
#+PLOT: file:"~/blog/mdr78.github.io/Org/gstreamer.png"
|   Version | Date       | Backward Compatibility |
|   0.10.35 | 15/06/2011 |                    N/A |
| 0.10.35.2 | 10/12/2011 |                   100% |
| 0.10.35.3 | 05/02/2012 |                 99.29% |
|   0.10.36 | 21/02/2012 |                   100% |
|    0.11.0 | 02/08/2011 |                 50.83% |
|    0.11.1 | 29/09/2011 |                 97.26% |
|    0.11.2 | 17/02/2012 |                 58.44% |
|    0.11.3 | 22/03/2012 |                 82.81% |
|   0.11.90 | 12/04/2012 |                 98.77% |
|   0.11.91 | 13/05/2012 |                 94.73% |
|   0.11.92 | 07/06/2012 |                 97.51% |
|   0.11.93 | 08/08/2012 |                 78.19% |
|   0.11.94 | 14/09/2012 |                 99.03% |
|   0.11.99 | 17/09/2012 |                   100% |
|     1.0.0 | 24/09/2012 |                   100% |
|     1.1.1 | 05/06/2013 |                   100% |
|    1.10.0 | 01/11/2016 |                   100% |
|    1.11.1 | 12/01/2017 |                   100% |
|    1.12.0 | 04/05/2017 |                   100% |
|    1.13.1 | 15/02/2018 |                   100% |
|    1.14.0 | 19/03/2018 |                   100% |
|    1.15.1 | 17/01/2019 |                   100% |
|    1.16.0 | 19/04/2019 |                   100% |
|     1.2.0 | 24/09/2013 |                   100% |
|     1.3.1 | 03/05/2014 |                   100% |
|     1.4.0 | 19/07/2014 |                   100% |
|     1.5.1 | 07/06/2015 |                 99.91% |
|     1.6.0 | 25/09/2015 |                   100% |
|     1.7.1 | 24/12/2015 |                   100% |
|     1.8.0 | 24/03/2016 |                   100% |
|     1.9.1 | 06/07/2016 |                   100% |


[[file:~/blog/mdr78.github.io/Org/gstreamer.png]]
 
Some software projects, particularly programming languages and operating
systems, by virtue of being governed either by a strict set of standards and/or
the requirement to offer very strong guarantee's about backward compatibility,
change very rarely. That is, they have a well-defined ABI from the start and it
very rarely changes thereafter, with is no period of stablization as such.
[[https://abi-laboratory.pro/index.php?view=timeline&l=libcxxabi][LibC++ (†)]] and [[https://abi-laboratory.pro/index.php?view=timeline&l=glibc][GlibC (†)]] are good examples of these sorts of projects.

#+PLOT: set:"xtics rotate" timefmt "%d/%m/%Y"
#+PLOT: title:"glibc Backward Compatibility"
#+PLOT: set:"yrange [0:110]" set:"ylabel '% Compatibility'" set:"key off"
#+PLOT: ind:2 deps:(3) type:2d with:linespoints with:labels 
#+PLOT: file:"~/blog/mdr78.github.io/Org/glibc.png"
| Version | Date       | Backward Compat |
|    2.13 | 18/01/2011 |             N/A |
|  2.14.1 | 07/10/2011 |            100% |
|    2.14 | 31/05/2011 |            100% |
|    2.15 | 19/03/2012 |          99.92% |
|  2.16.0 | 30/06/2012 |            100% |
|    2.17 | 25/12/2012 |          99.87% |
|    2.18 | 11/08/2013 |          99.66% |
|    2.19 | 07/02/2014 |            100% |
|     2.2 | 07/09/2014 |            100% |
|    2.21 | 06/02/2015 |          95.58% |
|    2.22 | 05/08/2015 |            100% |
|    2.23 | 18/02/2016 |          99.96% |
|    2.24 | 02/08/2016 |          99.76% |
|    2.25 | 05/02/2017 |          99.70% |
|    2.26 | 02/08/2017 |          99.54% |
|    2.27 | 01/02/2018 |          98.49% |
|    2.28 | 01/08/2018 |          99.92% |
|    2.29 | 31/01/2019 |          99.96% |
|     2.3 | 01/08/2019 |          94.30% |

[[file:~/blog/mdr78.github.io/Org/glibc.png]]

Other software projects, will support stable ABI version for some period of time
of months or more often years, with planned periodic ABI breakages to introduce
new features or to facilitate extensive re-factoring of software and the like.
These breakage's are often timed to coordinate with the lifecycle of consuming
software such as operating system distributions (Debian etc) or higher level
applications. [[https://abi-laboratory.pro/index.php?view=timeline&l=libav][LibAV (†)]] and [[https://abi-laboratory.pro/index.php?view=timeline&l=ffmpeg][ffmpeg (†)]] are the clearest examples of this kind of
project, I can think of.

#+PLOT: set:"xtics rotate" timefmt "%d/%m/%Y"
#+PLOT: title:"libav Backward Compatibility"
#+PLOT: set:"yrange [0:110]" set:"ylabel '% Compatibility'" set:"key off"
#+PLOT: ind:2 deps:(3) type:2d with:linespoints with:labels 
#+PLOT: file:"~/blog/mdr78.github.io/Org/libav.png"
| Version | Date       | Backward Compat |
|      10 | 23/03/2014 |           9.03% |
|    10.1 | 10/05/2014 |            100% |
|    10.2 | 27/06/2014 |            100% |
|    10.3 | 04/08/2014 |            100% |
|    10.4 | 17/08/2014 |            100% |
|    10.5 | 11/09/2014 |            100% |
|    10.6 | 09/03/2015 |            100% |
|    10.7 | 31/05/2015 |            100% |
|      11 | 13/09/2014 |              0% |
|    11.1 | 02/07/2017 |            100% |
|    11.1 | 02/12/2014 |            100% |
|   11.11 | 15/10/2017 |            100% |
|   11.12 | 04/02/2018 |            100% |
|    11.2 | 14/01/2015 |            100% |
|    11.3 | 09/03/2015 |            100% |
|    11.4 | 31/05/2015 |            100% |
|    11.5 | 24/02/2016 |            100% |
|    11.6 | 27/02/2016 |            100% |
|    11.7 | 25/05/2016 |            100% |
|    11.8 | 06/09/2016 |            100% |
|    11.9 | 10/04/2017 |            100% |
|      12 | 17/10/2016 |              0% |
|    12.1 | 14/05/2017 |            100% |
|    12.2 | 30/09/2017 |            100% |
|    12.3 | 13/02/2018 |            100% |

[[file:~/blog/mdr78.github.io/Org/libav.png]]

Finally, some software project's by virtue of a design philosophy or simply
because they are that bit earlier in their lifecycle, choose to offer fewer
guarantee's of ABI compatibility. [[https://abi-laboratory.pro/index.php?view=timeline&l=dpdk][DPDK]] and [[https://abi-laboratory.pro/index.php?view=timeline&l=Boost][Boost]] projects are
both good examples of this kind of project.

#+PLOT: set:"xtics rotate" timefmt "%d/%m/%Y"
#+PLOT: title:"DPDK Backward Compatibility"
#+PLOT: set:"yrange [0:110]" set:"ylabel '% Compatibility'" set:"key off"
#+PLOT: ind:1 deps:(3) type:2d with:linespoints with:labels 
#+PLOT: file:"~/blog/mdr78.github.io/Org/dpdk.png"
 | Version | Date       | Backward Compatibility |
 |   16.04 | 12/04/2016 |                    N/A |
 |   16.07 | 28/07/2016 |                 82.15% |
 |   16.11 | 13/11/2016 |                 91.53% |
 |   17.02 | 15/02/2017 |                 98.04% |
 |   17.05 | 11/05/2017 |                 88.56% |
 |   17.08 | 08/08/2017 |                 93.25% |
 |   17.11 | 15/11/2017 |                 74.35% |
 |   18.02 | 14/02/2018 |                 97.86% |
 |   18.05 | 30/05/2018 |                 84.94% |
 |   18.08 | 10/08/2018 |                 95.10% |
 |   18.11 | 27/11/2018 |                 91.49% |
 |   19.02 | 01/02/2019 |                 94.58% |
 |   19.05 | 14/05/2019 |                 95.55% |
 |   19.08 | 11/08/2019 |                 97.79% |

[[file:~/blog/mdr78.github.io/Org/dpdk.png]]

** Why are ABI Breakages considered bad?

Put simply, can you imagine a world in which every time you purchased a new car
the driving experience changed? You thought you knew how to drive a car, right?
You get your new wheels, all excited and discover that it's like are starting
all over again. How frustrating would that be?

ABI breakages are a bit like this. In the best case, they oblige consuming
software to have to rebuild their code to use the latest version with the new
ABI. In the worst case, they oblige that software to have to be refactored or
reworked significantly due to ABI changes.

And the consequences? Well in the best case, this behaviour makes developers
naturally reluctant to upgrade to the latest version of the project, they tend
to get sticky on older versions. In the worst case, those developers might start
looking for some else that doesn't break their code quiet so much.\\

And this worst case, happens more often than you might think ...\\

[[https://en.wikipedia.org/wiki/Miguel_de_Icaza][Miguel De Icaza]] is one the fathers' of the [[https://en.wikipedia.org/wiki/The_GNOME_Project][GNOME Project]], one of the best
[[https://en.wikipedia.org/wiki/Desktop_environment][desktop environments]] for Linux. For a few years in the late 90s and early 00s,
it looked Linux desktop distributions based on GNOME had a real shot with
competing with Microsoft Windows to become a popular desktop operating system.
However despite all the excitement, huge community effort, and commerical
support from major Linux vendors, it never really happened. Miguel explains why
in his blog post [[https://tirania.org/blog/archive/2012/Aug-29.html][What Killed the Linux Desktop]] (worth a read).

#+BEGIN_QUOTE 
Backwards compatibility is not a sexy problem. It is not even remotely an
interesting problem to solve. Nobody wants to do that work, everyone wants to
innovate, and be responsible for the next big feature in Linux.

So Linux was left with idealists that wanted to design the best possible system
without having to worry about boring details like support and backwards
compatibility.

Meanwhile, you can still run the 2001 Photoshop that came when XP was launched
on Windows 8. And you can still run your old OSX apps on Mountain Lion...
-- [[https://en.wikipedia.org/wiki/Miguel_de_Icaza][Miguel De Icaza]], 2012
#+END_QUOTE

It's a sobering message, ABI stability done right helped contribute to Linux's
vast success as an operating system and done wrong, it hurt it's popularity as
desktop operating system. The risk is for project's with an unstable API is
clear, eventually your consumers will start looking for something else that
doesn't break their code quiet so much.

DPDK's has an [[https://doc.dpdk.org/guides-19.08/contributing/versioning.html][ABI policy]] committing the community to preserving the DPDK ABI
since 2015. 

#+BEGIN_QUOTE
Note that the above process for ABI deprecation should not be
undertaken lightly. ABI stability is extremely important for downstream
consumers of the DPDK, especially when distributed in shared object form. Every
effort should be made to preserve the ABI whenever possible. The ABI should only
be changed for significant reasons, such as performance enhancements. ABI
breakage due to changes such as reorganizing public structure fields for
aesthetic or readability purposes should be avoided.
-- DPDK ABI Policy, 19.08
#+END_QUOTE

The policy encourages contributors to be mindful of consumers when making ABI
changes, this policy is now evolving to offer consumers more guarantees of
compatibility.

** How we are changing DPDK?

Recently the 3rd revision of a [[http://inbox.dpdk.org/dev/1565864619-17206-1-git-send-email-mdr@ashroe.eu/][patch]] to the DPDK ABI policy was posted to the
community, intended to start the process of moving DPDK out of the last category
of projects described above and providing it's consumers with more certainty
around future ABI compatibility. This patch has been approved by the [[https://core.dpdk.org/techboard/][DPDK
Technical Board]] and will become the new policy following the DPDK 19.11 LTS
release.

The intention is to continue to provide DPDK's consumers the best possible
features and performance for building dataplane applications, now with the
addition of clearer upgrade paths and a stronger commitment to backward
compatibility.

The change will mean that DPDK will now follow a pattern similar to that
described for the LibAV and FFMpeg projects above. A pattern that is
characterized by periods of ABI stability with periodic ABI breakages to
facilitate change. In this way, a DPDK "major" ABI version will be declared
aligned with the DPDK LTS release, and then supported in all the quarterly
release over the subsequent year.

To be clear, this /does not/ mean the ABI cannot change during this one year
stable period. It only means that the DPDK community will guarantee that
applications built and dynamically linked against the DPDK LTS release will
continue to work, without requiring a rebuild, through the quarterly releases
for the following year. The DPDK ABI can and will continue to evolve during this
period, adding great new features and so on, so long as ABI compatibility with
the LTS release is preserved.

However should a change be so dramatic as to require an unavoidable ABI
compatibility breakage, this change will now need to wait until the declaration
of the next major ABI version, aligned with the next LTS release. The intention
is that the one year period between major ABI versions, will then be reviewed
after the initial year with the intention of lengthening the stability period
and period between ABI breakages to two years for the next major ABI version.

The new ABI policy change encourages contributors to maintain ABI compatibility
with the major ABI version, by promoting a permissive culture around those
changes that preserve ABI compatibility. In addition, experimental libraries and
API continue to exist outside of any ABI compatibility requirements, encouraging
contributors and maintainers to give new features more time to settle before
making them a formal part of the ABI.

If you are interested in the next level of detail of how the new policy will
work, can review the [[http://inbox.dpdk.org/dev/1565864619-17206-1-git-send-email-mdr@ashroe.eu/][patch]].

Ray Kinsella <mdr@ashroe.eu>\\

Thomas Monjalon <thomas@monjalon.net>\\
