#+STARTUP: showall indentX
#+STARTUP: hidestars
#+OPTIONS: num:nil tags:nil toc:nil timestamps:nil \n:t
#+BEGIN_EXPORT html
---
layout: default
title: Fixing string literal relocations in IOVisor's uBPF
date: 2022-04-17 00:00:00 +0000
---
#+END_EXPORT

While spending time learning more about [[https://en.wikipedia.org/wiki/Berkeley_Packet_Filter][eBPF]], I integrated IOVisor's [[https://github.com/iovisor/ubpf][uBPF]]
(Userspace eBPF) with FD.io VPP for fun. I quickly came across the problem that
uBPF didn't like the ELF object file's produced by Clang.

On investigation, I found that while these object contained .text sections with
eBPF byte code as you would expect, it was also introducing ELF relocations for
functions and string literals what uBPF couldn't interpret.Turns out that uBPF's
support for ELF relocations for string literals and functions both need some
work. I wrote [[https://github.com/iovisor/ubpf/pull/102][PR #102]] which fixes the most obvious problems with string
literals. It copies the rodata sections containing the string literals onto the
heap, and then reads the relocation sections and updates pointers in the eBPF
byte code to point to the string literals, just before the eBPF byte itself is
interpreted into x86 byte code.

There is a long standing [[https://github.com/iovisor/ubpf/issues/18][bug #18]] raised against uBPF that talks through most of
the gory details.
